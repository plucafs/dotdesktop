import os
import strutils
import strformat
import rdstdin
import std/terminal
import sequtils

let home = getHomeDir()
let desktop_file_dir = home & ".local/share/applications/"

# set alias: alias dod='dotdesktop'
# list all file inside desktop_file_dir

proc save_file(complete_file_name: string, content: string) =
  echo fmt"Saving {complete_file_name}..."
  let desktop_file_dir_files = toSeq(walkDir(fmt"{desktop_file_dir}", relative=true))
  for file_name in desktop_file_dir_files:
    if toLower(file_name.path) == toLower(complete_file_name):
      echo "The file already exists"
  setCurrentDir(desktop_file_dir)
  writeFile(toLower(complete_file_name), content)
  stdout.styledWriteLine(fgGreen, "Done!")
    

proc dotdesktop() =
  echo fmt".: Welcome in dotdesktop (^^)/ :."

  let name: string = readLineFromStdin("Name: ").strip()
  stdout.styledWriteLine(fgGreen, fmt">>> {name}")

  var version: string = readLineFromStdin("Version: (1.0) ").strip()
  if version.len() == 0:
    version = "1.0"
  stdout.styledWriteLine(fgGreen, fmt">>> {version}")

  var typo: string = readLineFromStdin("Type: (Application) ").strip()
  if typo.len() == 0:
    typo = "Application"
  stdout.styledWriteLine(fgGreen, fmt">>> {typo}")

  var exec: string = readLineFromStdin(fmt"Exec: ({name}) ").strip()
  if exec.len() == 0:
    exec = fmt"{name}"
  stdout.styledWriteLine(fgGreen, fmt">>> {exec}")

  var icon: string = readLineFromStdin(fmt"Icon: ({name.toLower()}) ").strip()
  if icon.len() == 0:
    icon = fmt"{name.toLower()}"
  stdout.styledWriteLine(fgGreen, fmt">>> {icon}")

  let mime: string = readLineFromStdin(fmt"Mime: ").strip()
  stdout.styledWriteLine(fgGreen, fmt">>> {mime}")

  let comment: string = readLineFromStdin(fmt"Optional {name} comment: ").strip()
  stdout.styledWriteLine(fgGreen, fmt">>> {comment}")

  var ext_comment: string = readLineFromStdin("Optional external comment: ").strip()
  if ext_comment.len() != 0:
    ext_comment = "# " & ext_comment
  stdout.styledWriteLine(fgGreen, fmt">>> {ext_comment}")

  let content = fmt"""
{ext_comment}
[Desktop Entry]
Version={version}
Type={typo}
Name={name}
Comment={comment}
TryExec=
Exec={exec}
Icon={icon}
Encoding=UTF-8
Terminal=false
MimeType={mime};
Actions=
GenericName=
"""

  let complete_file_name = fmt"{name}.desktop"
  echo "\n" & content & "\n" & fmt"A {complete_file_name} file will be created inside {desktop_file_dir}. Proceed? Type y or n"
  if readLineFromStdin("").strip() != "y":
    if readLineFromStdin(fmt"Are you sure to stop the file creation? Type y or n").strip() != "y":
      stdout.styledWriteLine(fgCyan, fmt"File creation stopped!")
      return
  else:
    save_file(complete_file_name, content)

  stdout.styledWriteLine(fgGreen, fmt".: Thank you for having used dotdesktop (^^)/ :.")

try:
  dotdesktop()
except:
  echo "An error occured: " & getCurrentExceptionMsg()


# StartupWMClass=Tape
# NoDisplay= (is it's inside, the file is hidden)
# Comment[it_IT]=
# Encoding=UTF-8
# Exec=/home/
# GenericName[it_IT]=
# GenericName=
# Icon=/home/
# MimeType=
# Name[it_IT]=Anki
# Name=Anki
# Path=
# StartupNotify=true
# Terminal=false
# TerminalOptions=
# Type=Application
# Version=1.0
# X-KDE-SubstituteUID=false
# X-KDE-Username=
# X-AppImage-Version=1.4.0
# Categories=Utility;
# X-AppImage-BuildId=2A8pdj8QIJHsCrZ31xstmS3PCLj
# X-Desktop-File-Install-Version=0.26
# X-AppImage-Comment=Generated by /tmp/.mount_aerifoup1mSt/AppRun
# TryExec=/home/

# Application (type 1), Link (type 2) and Directory (type 3).
